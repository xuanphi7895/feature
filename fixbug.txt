## How to resolve migrations database
    My Project is Solved.
    Run in Package Manager Console:
        Use Visual Studio
            1.Drop-Database
            2.Remove-Migration
            3.Add-Migration InitialCreate
            4.Update-database
        Use Visual Studio Code
            1. dotnet ef database drop
            2. dotnet ef migrations remove
            3. dotnet ef migrations add InitialCreate -p Infrastructure -s Web -o Data/Migrations
            4. dotnet ef database update -p Infrastructure -s Web

## Create single page in angular with command line quickly
    1. ng g m home - create new model home
    2. ng g c home (--skip-tests)  - create folder home include file html, ts, scss, module

     CLient:
     125 Adding breadcrumbs - Add breadcrumbs -- npm install --save xng-breadcrumb


## Check and get in redis with cli
    - keys *  : GET all items in redis
    - get 'name' : Get a item detail in redis
     
## This Projects covers all fundamentals of Angular
        Multiple Modules
        Components, Template and DataBinding
        Form Validation
        HttpClient
        Animations
        Dependency Injection
        Routing & Navigation
        Service Workers
        Pipes
        Gaurds


## How to git develop to master
    git checkout master
    git merge develop
    git push origin master

    ## Reverting pushed commit
    git revert HEAD^ID (ID: 0 or 1 ..or id hash)


## HTTP error code meaning?
    If request was successful, then return 2xx code (3xx for redirect). If there was an internal logic error on a server, then return 5xx. If there is anything wrong in client request, then return 4xx code.
Look through available response code from selected category. If one of them has a name which matches well to your situation, you can use it. Otherwise just fallback to x00 code (200, 400, 500). If you doubt, fallback to x00 code.
Return error description in response body. For 4xx codes it must contain enough information for client developer to understand the reason and fix the client. For 5xx because of security reasons no details must be revealed.
If client needs to distinguish different errors and have different reaction depending on it, define a machine readable and extendible error format and use it everywhere in your API. It is good practice to make that from very beginning.
Keep in mind that client developer may do strange things and try to parse strings which you return as human readable description. And by changing the strings you will break such badly written clients. So always provide machine readable description and try to avoid reporting additional information in text.